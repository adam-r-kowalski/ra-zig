(fn readtill :args ((mut buffer (ptr u8)) (target u8) (mut times u64)) :ret (ptr u8)
  :body
  (loop
    (let current (deref buffer))
    (set! buffer (+ buffer 1))
    (when (= current target)
      (set! times (- times 1))
      (when (= 0 times) (return buffer)))))

(let blk (struct :ptr (ptr u8) :len u64))

(fn readfile :args ((filename (ptr u8))) :ret blk
  :body
  (let fd (open filename o-rdonly))
  (let len (lseek fd 0 seek-end))
  (lseek fd 0 seek-set)
  (let prot (bit-or prot-read prot-write))
  (let flags (bit-or map-private map-anonymous))
  (let data (mmap null len prot flags -1 0))
  (read fd data len)
  (close fd)
  (blk data len))
  
(fn classify :args ((mut buffer (ptr u8))) :ret f32
  :body
  (var correct 0.0)
  (var total 0.0)
  (set! buffer (readtill buffer '\n' 1))
  (loop
    (inc! total)
    (set! buffer (readtill buffer ',' 1))
    (let alive (= (deref buffer) '1'))
    (set! buffer (readtill buffer ',' 4))
    (let male (= (deref buffer) 'm'))
    (set! buffer (readtill buffer '\n' 1))
    (set! correct (+ correct (or (and male (not alive)) (and (not male) alive))))
    (when (= (deref buffer) '\0') (break)))
  (/ correct total))

(fn start :args () :ret i64
  :body
  (let contents (readfile "train.csv"))
  (let accuracy (classify (:ptr contents)))
  (printf "accuracy %f\n" accuracy)
  (munmap (:ptr contents) (:len contents)))

